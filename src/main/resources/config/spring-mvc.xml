<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">


	<!-- 避免IE在ajax请求时，返回json出现下载 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com.hb.controller"></context:component-scan>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>

	<!-- 启用基于注解的处理器映射，添加拦截器，类级别的处理器映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
			</list>
		</property>
	</bean>

	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	<mvc:resources mapping="/common/**" location="/common/" />

	<!-- 对模型视图添加前后缀 -->
	<!-- InternalResourceViewResolver：用于支持Servlet、JSP视图解析； viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包； 
		prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”； -->
	<!-- http://static.springsource.org/spring/docs/3.0.0.RC3/reference/html/ch05s07.html --><!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置视图层 使用jstl标签 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 定义视图前缀格式 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 定义视图后缀格式 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 如果当前请求为“/”时，则转发到“/helloworld/index" -->
	<!-- <mvc:view-controller path="/" view-name="forward:/index"/> -->

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- 默认的注解映射的支持 ,数据验证 -->
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service" />

	<!-- 数据验证,采用Hibernate-validator来进行验证 ,Hibernate-validator实现了JSR-303验证框架支持注解风格的验证。 
		首先我们要到http://hibernate.org/validator/下载需要的jar包，这里以4.3.1.Final作为演示， 解压后把hibernate-validator-4.3.1.Final.jar、jboss-logging-3.1.0.jar、validation-api-1.0.0.GA.jar这三个包添加到项目中。 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--不设置则默认为classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<bean id="validatemessageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:config/validatemessages" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>



	<!-- 统一处理异常，参考网页http://gaojiewyh.iteye.com/blog/1297746 ，http://cgs1999.iteye.com/blog/1547197 -->
	<bean id="exceptionResolver" class="com.hb.exception.CustomSimpleMappingExceptionResolver">
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
		<property name="exceptionMappings">
			<props>
				<prop key="com.hb.exception.SystemException">/error/500</prop>
				<prop key="com.hb.exception.BusinessException">/error/errorpage</prop>
				<prop key="java.lang.exception">/error/500</prop>
			</props>
		</property>
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<property name="defaultErrorView" value="error"></property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="ex"></property>
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
		<property name="warnLogCategory" value="WARN" />
		<!-- 默认HTTP状态码 -->
		<property name="defaultStatusCode" value="500" />
	</bean>

	<!-- 1.基于浏览器请求的国际化实现：定义国际化消息 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">

		<!-- 其中basename用来指定properties文件的通用名 如实例中的messages_en.properties,messages_ja.properties通用名都是messages -->
		<!-- <property name="basename" value="messages" /> -->
		<property name="basenames">
			<list>
				<value>i18n.messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="useCodeAsDefaultMessage" value="true" />

	</bean>

	<!-- 2.配置基于Session的处理,将提交上来的locale参数进行处理。方法3时，需要将此方法屏蔽 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<!-- 该属性可以不用配置 -->
		<property name="defaultLocale" value="zh"></property>
	</bean>

	<!-- 3.基于Cookie的国际化实现： -->
	<!-- 3.国际化配置 , 获取本地.需要将方法二屏蔽 -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"> 
		设置cookieName名称，可以根据名称通过js来修改设置，也可以像上面演示的那样修改设置，默认的名称为 类名+LOCALE（即：org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE 
		<property name="cookieName" value="lang" /> 设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT 
		<property name="cookieMaxAge" value="94608000"> 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见 
		<property name="cookiePath" value="/"> </bean> -->

	<!-- 国际化请求拦截器处理 -->
	<mvc:interceptors>
		<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />

		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
		<bean class="com.hb.web.auth.AuthInterceptor"></bean>
	</mvc:interceptors>


	<!--multipartResolver 支持分段文件上传 使用时form需要加上enctype="multipart/form-data"属性,且form的method设置为POST -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="defaultEncoding"> <value>UTF-8</value> </property> <property 
		name="maxUploadSize"> <value>32505856</value> 上传文件大小限制为31M，31*1024*1024 </property> 
		<property name="maxInMemorySize"> <value>4096</value> </property> <property 
		name="defaultEncoding" value="UTF-8" /> </bean> -->



	<!-- 拦截器 -->
	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**" /> <bean 
		class="sy.interceptors.SecurityInterceptor"> 不需要权限验证的地址 <property name="excludeUrls"> 
		<list> <value>/initController/init</value>初始化数据库 <value>/resourceController/tree</value>首页左侧功能菜单 
		<value>/userController/reg</value>用户注册 <value>/userController/login</value>用户登录 
		<value>/userController/loginCombobox</value>用户登录里面的autocomplete功能 <value>/userController/loginCombogrid</value>用户登录里面的combogrid功能 
		<value>/userController/logout</value>注销登录 <value>/resourceController/allTree</value>角色访问资源下拉树 
		<value>/roleController/tree</value>用户访问角色树(只能看到自己拥有的角色) <value>/roleController/allTree</value>用户访问角色树 
		<value>/userController/editCurrentUserPwdPage</value>用户修改自己的密码页面 <value>/userController/editCurrentUserPwd</value>用户修改自己的密码 
		<value>/userController/currentUserRolePage</value>查看自己的角色页面 <value>/userController/currentUserResourcePage</value>查看自己的权限页面 
		</list> </property> </bean> </mvc:interceptor> </mvc:interceptors> -->


</beans>